
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000764  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000058  00000764  00000764  000007b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000007bc  000007bc  00000810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000007d0  000007d0  00000824  2**2
                  ALLOC
  4 .debug_frame  00000194  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000959  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000314  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000001b8  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000040  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000005fb  00000000  00000000  00001845  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000291  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000020d1  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 f5 	calli 4a0 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 d0 	ori gp,gp,0x7d0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 d0 	ori r1,r1,0x7d0
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 08 54 	ori r3,r3,0x854

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#define PWM7 0x80
#define MAX_UT 5

/* Main Function */

int main(){
 208:	37 9c ff c8 	addi sp,sp,-56
 20c:	5b 8b 00 38 	sw (sp+56),r11
 210:	5b 8c 00 34 	sw (sp+52),r12
 214:	5b 8d 00 30 	sw (sp+48),r13
 218:	5b 8e 00 2c 	sw (sp+44),r14
 21c:	5b 8f 00 28 	sw (sp+40),r15
 220:	5b 90 00 24 	sw (sp+36),r16
 224:	5b 91 00 20 	sw (sp+32),r17
 228:	5b 92 00 1c 	sw (sp+28),r18
 22c:	5b 93 00 18 	sw (sp+24),r19
 230:	5b 94 00 14 	sw (sp+20),r20
 234:	5b 95 00 10 	sw (sp+16),r21
 238:	5b 96 00 0c 	sw (sp+12),r22
 23c:	5b 97 00 08 	sw (sp+8),r23
 240:	5b 9d 00 04 	sw (sp+4),ra
	uint32_t ut = 0;
	gpio_config_dir(0xFF);
 244:	34 01 00 ff 	mvi r1,255
 248:	f8 00 00 84 	calli 458 <gpio_config_dir>
	gpio_write(0xFF);
 24c:	34 01 00 ff 	mvi r1,255
 250:	f8 00 00 88 	calli 470 <gpio_write>
	uint32_t ut = 0;
 254:	34 0b 00 00 	mvi r11,0
	while(1){
		nsleep(1);
		ut = ut + 1;
		if(ut <= PWM_D0)
 258:	34 0c 00 02 	mvi r12,2
		else
			gpio_write(~(PWM6) & gpio_read());
		if(ut <= PWM_D7)
			gpio_write(PWM7 | gpio_read());
		else
			gpio_write(~(PWM7) & gpio_read());
 25c:	34 0f ff 7f 	mvi r15,-129
		if(ut == MAX_UT){
 260:	34 0e 00 05 	mvi r14,5
			gpio_write(~(PWM0) & gpio_read());
 264:	34 17 ff fe 	mvi r23,-2
		if(ut <= PWM_D1)
 268:	34 16 00 03 	mvi r22,3
			gpio_write(~(PWM2) & gpio_read());
 26c:	34 0d ff fb 	mvi r13,-5
			gpio_write(~(PWM3) & gpio_read());
 270:	34 11 ff f7 	mvi r17,-9
			gpio_write(~(PWM4) & gpio_read());
 274:	34 10 ff ef 	mvi r16,-17
			gpio_write(~(PWM6) & gpio_read());
 278:	34 15 ff bf 	mvi r21,-65
			gpio_write(~(PWM1) & gpio_read());
 27c:	34 14 ff fd 	mvi r20,-3
		if(ut <= PWM_D5)
 280:	34 13 00 04 	mvi r19,4
			gpio_write(~(PWM5) & gpio_read());
 284:	34 12 ff df 	mvi r18,-33
		ut = ut + 1;
 288:	35 6b 00 01 	addi r11,r11,1
		nsleep(1);
 28c:	34 01 00 01 	mvi r1,1
 290:	f8 00 00 c5 	calli 5a4 <nsleep>
		if(ut <= PWM_D0)
 294:	55 6c 00 35 	bgu r11,r12,368 <main+0x160>
			gpio_write(PWM0 | gpio_read());
 298:	f8 00 00 7c 	calli 488 <gpio_read>
 29c:	38 21 00 01 	ori r1,r1,0x1
 2a0:	f8 00 00 74 	calli 470 <gpio_write>
			gpio_write(PWM1 | gpio_read());
 2a4:	f8 00 00 79 	calli 488 <gpio_read>
 2a8:	38 21 00 02 	ori r1,r1,0x2
 2ac:	f8 00 00 71 	calli 470 <gpio_write>
		if(ut <= PWM_D2)
 2b0:	45 6c 00 1e 	be r11,r12,328 <main+0x120>
			gpio_write(PWM2 | gpio_read());
 2b4:	f8 00 00 75 	calli 488 <gpio_read>
 2b8:	38 21 00 04 	ori r1,r1,0x4
 2bc:	f8 00 00 6d 	calli 470 <gpio_write>
			gpio_write(PWM3 | gpio_read());
 2c0:	f8 00 00 72 	calli 488 <gpio_read>
 2c4:	38 21 00 08 	ori r1,r1,0x8
 2c8:	f8 00 00 6a 	calli 470 <gpio_write>
			gpio_write(PWM4 | gpio_read());
 2cc:	f8 00 00 6f 	calli 488 <gpio_read>
 2d0:	38 21 00 10 	ori r1,r1,0x10
 2d4:	f8 00 00 67 	calli 470 <gpio_write>
			gpio_write(PWM5 | gpio_read());
 2d8:	f8 00 00 6c 	calli 488 <gpio_read>
 2dc:	38 21 00 20 	ori r1,r1,0x20
 2e0:	f8 00 00 64 	calli 470 <gpio_write>
			gpio_write(PWM6 | gpio_read());
 2e4:	f8 00 00 69 	calli 488 <gpio_read>
 2e8:	38 21 00 40 	ori r1,r1,0x40
 2ec:	f8 00 00 61 	calli 470 <gpio_write>
			gpio_write(PWM7 | gpio_read());
 2f0:	f8 00 00 66 	calli 488 <gpio_read>
 2f4:	38 21 00 80 	ori r1,r1,0x80
 2f8:	f8 00 00 5e 	calli 470 <gpio_write>
		ut = ut + 1;
 2fc:	35 6b 00 01 	addi r11,r11,1
		nsleep(1);
 300:	34 01 00 01 	mvi r1,1
 304:	f8 00 00 a8 	calli 5a4 <nsleep>
		if(ut <= PWM_D0)
 308:	55 6c 00 18 	bgu r11,r12,368 <main+0x160>
			gpio_write(PWM0 | gpio_read());
 30c:	f8 00 00 5f 	calli 488 <gpio_read>
 310:	38 21 00 01 	ori r1,r1,0x1
 314:	f8 00 00 57 	calli 470 <gpio_write>
			gpio_write(PWM1 | gpio_read());
 318:	f8 00 00 5c 	calli 488 <gpio_read>
 31c:	38 21 00 02 	ori r1,r1,0x2
 320:	f8 00 00 54 	calli 470 <gpio_write>
		if(ut <= PWM_D2)
 324:	5d 6c ff e4 	bne r11,r12,2b4 <main+0xac>
			gpio_write(~(PWM2) & gpio_read());
 328:	f8 00 00 58 	calli 488 <gpio_read>
 32c:	a0 2d 08 00 	and r1,r1,r13
 330:	f8 00 00 50 	calli 470 <gpio_write>
			gpio_write(PWM3 | gpio_read());
 334:	f8 00 00 55 	calli 488 <gpio_read>
 338:	38 21 00 08 	ori r1,r1,0x8
 33c:	f8 00 00 4d 	calli 470 <gpio_write>
			gpio_write(PWM4 | gpio_read());
 340:	f8 00 00 52 	calli 488 <gpio_read>
 344:	38 21 00 10 	ori r1,r1,0x10
 348:	f8 00 00 4a 	calli 470 <gpio_write>
			gpio_write(PWM5 | gpio_read());
 34c:	f8 00 00 4f 	calli 488 <gpio_read>
 350:	38 21 00 20 	ori r1,r1,0x20
 354:	f8 00 00 47 	calli 470 <gpio_write>
			gpio_write(PWM6 | gpio_read());
 358:	f8 00 00 4c 	calli 488 <gpio_read>
 35c:	38 21 00 40 	ori r1,r1,0x40
 360:	f8 00 00 44 	calli 470 <gpio_write>
 364:	e0 00 00 18 	bi 3c4 <main+0x1bc>
			gpio_write(~(PWM0) & gpio_read());
 368:	f8 00 00 48 	calli 488 <gpio_read>
 36c:	a0 37 08 00 	and r1,r1,r23
 370:	f8 00 00 40 	calli 470 <gpio_write>
		if(ut <= PWM_D1)
 374:	45 76 00 1b 	be r11,r22,3e0 <main+0x1d8>
			gpio_write(~(PWM1) & gpio_read());
 378:	f8 00 00 44 	calli 488 <gpio_read>
 37c:	a0 34 08 00 	and r1,r1,r20
 380:	f8 00 00 3c 	calli 470 <gpio_write>
			gpio_write(~(PWM2) & gpio_read());
 384:	f8 00 00 41 	calli 488 <gpio_read>
 388:	a0 2d 08 00 	and r1,r1,r13
 38c:	f8 00 00 39 	calli 470 <gpio_write>
			gpio_write(~(PWM3) & gpio_read());
 390:	f8 00 00 3e 	calli 488 <gpio_read>
 394:	a0 31 08 00 	and r1,r1,r17
 398:	f8 00 00 36 	calli 470 <gpio_write>
			gpio_write(~(PWM4) & gpio_read());
 39c:	f8 00 00 3b 	calli 488 <gpio_read>
 3a0:	a0 30 08 00 	and r1,r1,r16
 3a4:	f8 00 00 33 	calli 470 <gpio_write>
		if(ut <= PWM_D5)
 3a8:	52 6b 00 1a 	bgeu r19,r11,410 <main+0x208>
			gpio_write(~(PWM5) & gpio_read());
 3ac:	f8 00 00 37 	calli 488 <gpio_read>
 3b0:	a0 32 08 00 	and r1,r1,r18
 3b4:	f8 00 00 2f 	calli 470 <gpio_write>
			gpio_write(~(PWM6) & gpio_read());
 3b8:	f8 00 00 34 	calli 488 <gpio_read>
 3bc:	a0 35 08 00 	and r1,r1,r21
 3c0:	f8 00 00 2c 	calli 470 <gpio_write>
			gpio_write(~(PWM7) & gpio_read());
 3c4:	f8 00 00 31 	calli 488 <gpio_read>
 3c8:	a0 2f 08 00 	and r1,r1,r15
 3cc:	f8 00 00 29 	calli 470 <gpio_write>
			ut = 0;
 3d0:	fd 6e 08 00 	cmpne r1,r11,r14
 3d4:	c8 01 08 00 	sub r1,r0,r1
 3d8:	a1 61 58 00 	and r11,r11,r1
 3dc:	e3 ff ff ab 	bi 288 <main+0x80>
			gpio_write(PWM1 | gpio_read());
 3e0:	f8 00 00 2a 	calli 488 <gpio_read>
 3e4:	38 21 00 02 	ori r1,r1,0x2
 3e8:	f8 00 00 22 	calli 470 <gpio_write>
			gpio_write(~(PWM2) & gpio_read());
 3ec:	f8 00 00 27 	calli 488 <gpio_read>
 3f0:	a0 2d 08 00 	and r1,r1,r13
 3f4:	f8 00 00 1f 	calli 470 <gpio_write>
			gpio_write(~(PWM3) & gpio_read());
 3f8:	f8 00 00 24 	calli 488 <gpio_read>
 3fc:	a0 31 08 00 	and r1,r1,r17
 400:	f8 00 00 1c 	calli 470 <gpio_write>
			gpio_write(~(PWM4) & gpio_read());
 404:	f8 00 00 21 	calli 488 <gpio_read>
 408:	a0 30 08 00 	and r1,r1,r16
 40c:	f8 00 00 19 	calli 470 <gpio_write>
			gpio_write(PWM5 | gpio_read());
 410:	f8 00 00 1e 	calli 488 <gpio_read>
 414:	38 21 00 20 	ori r1,r1,0x20
 418:	f8 00 00 16 	calli 470 <gpio_write>
 41c:	e3 ff ff e7 	bi 3b8 <main+0x1b0>

00000420 <tic_isr>:
}

uint32_t tic_msec;

void tic_isr(){
	tic_msec++;
 420:	78 01 00 00 	mvhi r1,0x0
 424:	38 21 07 64 	ori r1,r1,0x764
 428:	28 22 00 00 	lw r2,(r1+0)
	timer0->tcr0 = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 42c:	78 04 00 00 	mvhi r4,0x0
 430:	38 84 07 68 	ori r4,r4,0x768
 434:	28 83 00 00 	lw r3,(r4+0)
	tic_msec++;
 438:	28 41 00 00 	lw r1,(r2+0)
	timer0->tcr0 = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 43c:	28 63 00 00 	lw r3,(r3+0)
	tic_msec++;
 440:	34 21 00 01 	addi r1,r1,1
 444:	58 41 00 00 	sw (r2+0),r1
	timer0->tcr0 = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 448:	34 01 00 0e 	mvi r1,14
 44c:	58 61 00 00 	sw (r3+0),r1
}
 450:	c3 a0 00 00 	ret

00000454 <isr_null>:
 454:	c3 a0 00 00 	ret

00000458 <gpio_config_dir>:
	gpio0 -> dir = vdir;
 458:	78 03 00 00 	mvhi r3,0x0
 45c:	38 63 07 6c 	ori r3,r3,0x76c
 460:	28 62 00 00 	lw r2,(r3+0)
 464:	28 42 00 00 	lw r2,(r2+0)
 468:	58 41 00 08 	sw (r2+8),r1
}
 46c:	c3 a0 00 00 	ret

00000470 <gpio_write>:
	gpio0 -> wr = vpins;
 470:	78 03 00 00 	mvhi r3,0x0
 474:	38 63 07 70 	ori r3,r3,0x770
 478:	28 62 00 00 	lw r2,(r3+0)
 47c:	28 42 00 00 	lw r2,(r2+0)
 480:	58 41 00 04 	sw (r2+4),r1
}
 484:	c3 a0 00 00 	ret

00000488 <gpio_read>:
	return gpio0 -> rd;
 488:	78 02 00 00 	mvhi r2,0x0
 48c:	38 42 07 74 	ori r2,r2,0x774
 490:	28 41 00 00 	lw r1,(r2+0)
 494:	28 21 00 00 	lw r1,(r1+0)
 498:	28 21 00 00 	lw r1,(r1+0)
}
 49c:	c3 a0 00 00 	ret

000004a0 <irq_handler>:
void irq_handler(uint32_t pending){
 4a0:	37 9c ff f0 	addi sp,sp,-16
 4a4:	5b 8b 00 10 	sw (sp+16),r11
 4a8:	5b 8c 00 0c 	sw (sp+12),r12
 4ac:	5b 8d 00 08 	sw (sp+8),r13
 4b0:	5b 9d 00 04 	sw (sp+4),ra
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 07 78 	ori r2,r2,0x778
 4bc:	28 4b 00 00 	lw r11,(r2+0)
 4c0:	b8 20 60 00 	mv r12,r1
 4c4:	35 6d 00 80 	addi r13,r11,128
		if (pending & 0x01) (*isr_table[i])();
 4c8:	21 81 00 01 	andi r1,r12,0x1
 4cc:	44 20 00 03 	be r1,r0,4d8 <irq_handler+0x38>
 4d0:	29 61 00 00 	lw r1,(r11+0)
 4d4:	d8 20 00 00 	call r1
 4d8:	35 6b 00 04 	addi r11,r11,4
		pending >>= 1;
 4dc:	01 8c 00 01 	srui r12,r12,1
	for(i=0; i<32; i++) {
 4e0:	5d ab ff fa 	bne r13,r11,4c8 <irq_handler+0x28>
}
 4e4:	2b 9d 00 04 	lw ra,(sp+4)
 4e8:	2b 8b 00 10 	lw r11,(sp+16)
 4ec:	2b 8c 00 0c 	lw r12,(sp+12)
 4f0:	2b 8d 00 08 	lw r13,(sp+8)
 4f4:	37 9c 00 10 	addi sp,sp,16
 4f8:	c3 a0 00 00 	ret

000004fc <isr_init>:
void isr_init(){
 4fc:	78 02 00 00 	mvhi r2,0x0
 500:	38 42 07 7c 	ori r2,r2,0x77c
 504:	28 41 00 00 	lw r1,(r2+0)
 508:	78 02 00 00 	mvhi r2,0x0
 50c:	38 42 07 80 	ori r2,r2,0x780
 510:	28 43 00 00 	lw r3,(r2+0)
 514:	34 22 00 80 	addi r2,r1,128
		isr_table[i] = &isr_null;
 518:	58 23 00 00 	sw (r1+0),r3
 51c:	34 21 00 04 	addi r1,r1,4
	for(i=0; i<32; i++)
 520:	5c 22 ff fe 	bne r1,r2,518 <isr_init+0x1c>
}
 524:	c3 a0 00 00 	ret

00000528 <isr_register>:
	isr_table[irq] = isr;
 528:	78 04 00 00 	mvhi r4,0x0
 52c:	38 84 07 84 	ori r4,r4,0x784
 530:	3c 23 00 02 	sli r3,r1,2
 534:	28 81 00 00 	lw r1,(r4+0)
 538:	b4 23 08 00 	add r1,r1,r3
 53c:	58 22 00 00 	sw (r1+0),r2
}
 540:	c3 a0 00 00 	ret

00000544 <isr_unregister>:
	isr_table[irq] = &isr_null;
 544:	78 03 00 00 	mvhi r3,0x0
 548:	38 63 07 88 	ori r3,r3,0x788
 54c:	3c 22 00 02 	sli r2,r1,2
 550:	28 61 00 00 	lw r1,(r3+0)
 554:	78 03 00 00 	mvhi r3,0x0
 558:	38 63 07 8c 	ori r3,r3,0x78c
 55c:	b4 22 08 00 	add r1,r1,r2
 560:	28 62 00 00 	lw r2,(r3+0)
 564:	58 22 00 00 	sw (r1+0),r2
}
 568:	c3 a0 00 00 	ret

0000056c <msleep>:
	timer0->compare1 = (FCPU/1000)*msec;
 56c:	78 03 00 00 	mvhi r3,0x0
 570:	38 02 c3 50 	mvu r2,0xc350
 574:	38 63 07 90 	ori r3,r3,0x790
 578:	88 22 08 00 	mul r1,r1,r2
 57c:	28 62 00 00 	lw r2,(r3+0)
 580:	28 42 00 00 	lw r2,(r2+0)
 584:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 588:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 58c:	34 01 00 08 	mvi r1,8
 590:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 594:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 598:	20 21 00 01 	andi r1,r1,0x1
 59c:	44 20 ff fe 	be r1,r0,594 <msleep+0x28>
}
 5a0:	c3 a0 00 00 	ret

000005a4 <nsleep>:
	timer0->compare1 = (FCPU/1000000)*nsec;
 5a4:	78 03 00 00 	mvhi r3,0x0
 5a8:	38 63 07 94 	ori r3,r3,0x794
 5ac:	28 62 00 00 	lw r2,(r3+0)
 5b0:	08 21 00 32 	muli r1,r1,50
 5b4:	28 42 00 00 	lw r2,(r2+0)
 5b8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 5bc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 5c0:	34 01 00 08 	mvi r1,8
 5c4:	58 41 00 0c 	sw (r2+12),r1
 		tcr = timer0->tcr1;
 5c8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 5cc:	20 21 00 01 	andi r1,r1,0x1
 5d0:	44 20 ff fe 	be r1,r0,5c8 <nsleep+0x24>
}
 5d4:	c3 a0 00 00 	ret

000005d8 <tic_init>:

void tic_init(){
	tic_msec = 0;
	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 5d8:	78 02 00 00 	mvhi r2,0x0
 5dc:	38 42 07 98 	ori r2,r2,0x798
 5e0:	28 41 00 00 	lw r1,(r2+0)
	tic_msec = 0;
 5e4:	78 03 00 00 	mvhi r3,0x0
	timer0->compare0 = (FCPU/10000);
 5e8:	34 02 13 88 	mvi r2,5000
 5ec:	28 21 00 00 	lw r1,(r1+0)
	tic_msec = 0;
 5f0:	38 63 07 9c 	ori r3,r3,0x79c
	timer0->compare0 = (FCPU/10000);
 5f4:	58 22 00 04 	sw (r1+4),r2
	tic_msec = 0;
 5f8:	28 62 00 00 	lw r2,(r3+0)
	timer0->counter0 = 0;
 5fc:	58 20 00 08 	sw (r1+8),r0
	isr_table[irq] = isr;
 600:	78 03 00 00 	mvhi r3,0x0
	tic_msec = 0;
 604:	58 40 00 00 	sw (r2+0),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 608:	34 02 00 0e 	mvi r2,14
 60c:	58 22 00 00 	sw (r1+0),r2
	isr_table[irq] = isr;
 610:	78 02 00 00 	mvhi r2,0x0
 614:	38 42 07 a0 	ori r2,r2,0x7a0
 618:	38 63 07 a4 	ori r3,r3,0x7a4
 61c:	28 41 00 00 	lw r1,(r2+0)
 620:	28 62 00 00 	lw r2,(r3+0)
 624:	58 22 00 04 	sw (r1+4),r2
	isr_register(1, &tic_isr);
}
 628:	c3 a0 00 00 	ret

0000062c <uart_init>:
//	uart0->ier = 0x00;  // Interrupt Enable Register
//	uart0->lcr = 0x03;  // Line Control Register: 8N1
//	uart0->mcr = 0x00;  // Modem Control Register
	// Setup Divisor register (FCLK/BAUD)
//	uart0->div = (FCPU/(57600*16));
}
 62c:	c3 a0 00 00 	ret

00000630 <uart_getchar>:

char uart_getchar(){   
	while (! (uart0->ucr & UART_DR)) ;
 630:	78 02 00 00 	mvhi r2,0x0
 634:	38 42 07 a8 	ori r2,r2,0x7a8
 638:	28 41 00 00 	lw r1,(r2+0)
 63c:	28 22 00 00 	lw r2,(r1+0)
 640:	28 41 00 00 	lw r1,(r2+0)
 644:	20 21 00 10 	andi r1,r1,0x10
 648:	44 20 ff fe 	be r1,r0,640 <uart_getchar+0x10>
	return uart0->rxtx;
 64c:	28 41 00 04 	lw r1,(r2+4)
}
 650:	20 21 00 ff 	andi r1,r1,0xff
 654:	c3 a0 00 00 	ret

00000658 <uart_putchar>:

void uart_putchar(char c){
	while (uart0->ucr & UART_BUSY) ;
 658:	78 03 00 00 	mvhi r3,0x0
 65c:	38 63 07 ac 	ori r3,r3,0x7ac
 660:	28 62 00 00 	lw r2,(r3+0)
void uart_putchar(char c){
 664:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 668:	28 43 00 00 	lw r3,(r2+0)
 66c:	28 62 00 00 	lw r2,(r3+0)
 670:	20 42 00 10 	andi r2,r2,0x10
 674:	5c 40 ff fe 	bne r2,r0,66c <uart_putchar+0x14>
	uart0->rxtx = c;
 678:	58 61 00 04 	sw (r3+4),r1
}
 67c:	c3 a0 00 00 	ret

00000680 <uart_putstr>:

void uart_putstr(char *str){
	char *c = str;
	while(*c) {
 680:	40 24 00 00 	lbu r4,(r1+0)
 684:	44 80 00 0c 	be r4,r0,6b4 <uart_putstr+0x34>
	while (uart0->ucr & UART_BUSY) ;
 688:	78 03 00 00 	mvhi r3,0x0
 68c:	38 63 07 b0 	ori r3,r3,0x7b0
 690:	28 62 00 00 	lw r2,(r3+0)
 694:	28 43 00 00 	lw r3,(r2+0)
 698:	28 62 00 00 	lw r2,(r3+0)
 69c:	20 42 00 10 	andi r2,r2,0x10
 6a0:	5c 40 ff fe 	bne r2,r0,698 <uart_putstr+0x18>
	uart0->rxtx = c;
 6a4:	58 64 00 04 	sw (r3+4),r4
		uart_putchar(*c);
		c++;
 6a8:	34 21 00 01 	addi r1,r1,1
	while(*c) {
 6ac:	40 24 00 00 	lbu r4,(r1+0)
 6b0:	5c 80 ff fa 	bne r4,r0,698 <uart_putstr+0x18>
	}
}
 6b4:	c3 a0 00 00 	ret

000006b8 <i2c_init>:

/* I2C Functions */

void i2c_init(){
	i2c0->prerl =0x00;
 6b8:	78 02 00 00 	mvhi r2,0x0
 6bc:	38 42 07 b4 	ori r2,r2,0x7b4
 6c0:	28 41 00 00 	lw r1,(r2+0)
	i2c0->prerh =0x50;
 6c4:	34 02 00 50 	mvi r2,80
	i2c0->prerl =0x00;
 6c8:	28 21 00 00 	lw r1,(r1+0)
 6cc:	30 20 00 00 	sb (r1+0),r0
	i2c0->prerh =0x50;
 6d0:	30 22 00 01 	sb (r1+1),r2
	i2c0->ctr =0x80;
 6d4:	34 02 ff 80 	mvi r2,-128
 6d8:	30 22 00 02 	sb (r1+2),r2
}
 6dc:	c3 a0 00 00 	ret

000006e0 <i2c_write>:

void i2c_write(char addrDev, char addrReg, char dat){
   i2c0->TxRx=(addrDev<<1 +1);
 6e0:	78 05 00 00 	mvhi r5,0x0
 6e4:	38 a5 07 b8 	ori r5,r5,0x7b8
 6e8:	28 a4 00 00 	lw r4,(r5+0)
 6ec:	3c 21 00 02 	sli r1,r1,2
void i2c_write(char addrDev, char addrReg, char dat){
 6f0:	20 42 00 ff 	andi r2,r2,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 6f4:	28 84 00 00 	lw r4,(r4+0)
 6f8:	20 21 00 fc 	andi r1,r1,0xfc
void i2c_write(char addrDev, char addrReg, char dat){
 6fc:	20 63 00 ff 	andi r3,r3,0xff
   i2c0->TxRx=(addrDev<<1 +1);
 700:	30 81 00 03 	sb (r4+3),r1
   i2c0->crsr =0x90;
 704:	34 01 ff 90 	mvi r1,-112
 708:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 70c:	40 81 00 04 	lbu r1,(r4+4)
 710:	20 21 00 02 	andi r1,r1,0x2
 714:	5c 20 ff fe 	bne r1,r0,70c <i2c_write+0x2c>
   i2c0->TxRx=addrReg;
 718:	30 82 00 03 	sb (r4+3),r2
   i2c0->crsr =0x10;
 71c:	34 01 00 10 	mvi r1,16
 720:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 724:	40 81 00 04 	lbu r1,(r4+4)
 728:	20 21 00 02 	andi r1,r1,0x2
 72c:	5c 20 ff fe 	bne r1,r0,724 <i2c_write+0x44>
   i2c0->TxRx=dat;
 730:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x10;
 734:	34 01 00 10 	mvi r1,16
 738:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 73c:	40 81 00 04 	lbu r1,(r4+4)
 740:	20 21 00 02 	andi r1,r1,0x2
 744:	5c 20 ff fe 	bne r1,r0,73c <i2c_write+0x5c>
   i2c0->TxRx=dat; 
 748:	30 83 00 03 	sb (r4+3),r3
   i2c0->crsr =0x50;
 74c:	34 01 00 50 	mvi r1,80
 750:	30 81 00 04 	sb (r4+4),r1
   while((i2c0->crsr)& I2C_TIP);
 754:	40 81 00 04 	lbu r1,(r4+4)
 758:	20 21 00 02 	andi r1,r1,0x2
 75c:	5c 20 ff fe 	bne r1,r0,754 <i2c_write+0x74>
}
 760:	c3 a0 00 00 	ret
